{"version":3,"sources":["datastructures/CellData.js","components/GridCell.jsx","components/Grid.jsx","components/enums.js","components/TopBar.jsx","datastructures/PriorityQueue.js","algorithms/util.js","algorithms/astar.js","algorithms/dijikstra.js","datastructures/Queue.js","algorithms/bfs.js","algorithms/dfs.js","datastructures/MazeCell.js","algorithms/recursive_division_maze.js","components/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["CellType","CellData","row","col","type","isSelected","weight","this","id","visited","Infinity","newType","GridCell","props","cType","data","subclass","className","onMouseDown","onMouseEnter","defaultProps","React","memo","GridContainer","styled","div","totalWidthPixels","cellsPerRow","cellHeightPixels","cellsPerCol","cellWidthPixels","Grid","cells","length","map","rowArr","cellData","key","Algorithm","useStyles","makeStyles","theme","title","marginRight","color","palette","primary","contrastText","itemContainer","display","flexDirection","marginLeft","menu","textAlign","btn","height","border","borderRadius","runBtn","background","boxShadow","TopBar","useState","anchorEl","setAnchorEl","handleClose","handleAlgoSelection","algo","setAlgo","classes","AppBar","position","Toolbar","Typography","variant","Button","aria-controls","aria-haspopup","onClick","e","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","clearGrid","runAnimatedAlgo","selectedAlgoName","PQElement","priority","PriorityQueue","items","is_corner","coordDiff","isUpperLeft","isUpperRight","isLowerLeft","isLowerRight","get_neighbors","grid","node","search_corners","neighbors","isOriginNode","neighbor","push","mark_neighbors_visited","forEach","asType","euclidean_distance","x1","y1","x2","y2","Math","sqrt","random_integer","up_to","floor","random","random_integer_in_range","min","max","reconstruct_path","cameFrom","current","start","total_path","undefined","unshift","slice","a_star","goal","visitedNodes","openSet","enqueue","Map","gscore","fscore","isEmpty","dequeue","i","tentative_gscore","neighbor_gscore","has","contains","reconstructPath","prev","Queue","elements","dfs","s","explored","pop","edges","direct_edges","prototype","pqelement","contain","splice","shift","console","log","front","rear","element","includes","peek","MazeCell","isWall","isPassage","originCell","maze","rowDiff","colDiff","coords","walls","Orientation","recursive_division_maze","rows","cols","startCell","goalCell","curRow","get_initial_maze","divide","width","startRow","endRow","startCol","endCol","orientation","horizontal","cutRow","cutCol","holeRow","holeCol","mark_wall","w","h","sr","er","sc","ec","get_orientation","gridWallsToAnimate","isStart","isGoal","convert_maze_to_grid","Pathfinder","DEFAULT_START_ROW","round","gridRows","DEFAULT_START_COL","gridColumns","DEFAULT_GOAL_ROW","DEFAULT_GOAL_COL","getInitialGrid","setGrid","setStartCell","setGoalCell","selectedAlgo","setSelectedAlgo","mouseIsDown","setMouseIsDown","draggingCell","setDraggingCell","draggedCellType","setDraggedCellType","draggedFrom","setDraggedFrom","draggedTo","setDraggedTo","placeWallAndGetGrid","newGrid","animateAlgo","reconstructedRoute","visitedNode","setTimeout","document","getElementById","animateRouteReconstruction","routeNode","Fragment","cell","result","q","bfs","dist","vertices","alt","dijikstra","genMaze","wallsToAnimate","mazeWall","onMouseUp","fromRow","fromCol","toRow","toCol","dragCellAndGetGrid","App","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0UAAaA,EACD,YADCA,EAEJ,aAFIA,EAGL,YAHKA,EAIF,YAJEA,EAKD,gBALCA,EAMF,UANEA,EAOK,QAILC,EAAb,WACE,WAAYC,EAAKC,GAAkE,IAA7DC,EAA4D,uDAArDJ,EAAmBK,EAAkC,wDAAdC,EAAc,uDAAL,EAAK,oBAChFC,KAAKL,IAAMA,EACXK,KAAKJ,IAAMA,EACXI,KAAKC,GAAL,eAAkBN,EAAlB,YAAyBC,GACzBI,KAAKH,KAAOA,EACZG,KAAKF,WAAaA,EAClBE,KAAKE,QAAUL,KAAUJ,GAAoBA,GAC7CO,KAAKD,OAASF,IAASJ,EAAoBM,EAASF,IAASJ,EAAmBU,IAAW,EAR/F,mDAWSC,GACL,OAAO,IAAIV,EAASM,KAAKL,IAAKK,KAAKJ,IAAKQ,EAASJ,KAAKF,gBAZ1D,KCNIO,G,MAAW,SAACC,GACd,IAAMC,EAAQD,EAAME,KAAKX,KACnBY,EACJF,IAAUd,EACN,cACAc,IAAUd,EACV,aACAc,IAAUd,EACV,iBACAc,IAAUd,EACV,aACAc,IAAUd,EACV,WACAc,IAAUd,EACV,SACA,GAEN,OACE,yBACEQ,GAAIK,EAAME,KAAKP,GACfS,UAAS,mBAAcD,GACvBE,YAAa,kBAAML,EAAMK,YAAYL,EAAME,KAAKb,IAAKW,EAAME,KAAKZ,MAChEgB,aAAc,kBAAMN,EAAMM,aAAaN,EAAME,KAAKb,IAAKW,EAAME,KAAKZ,UAWxES,EAASQ,aAAe,CACtBL,KAAM,IAAId,EACViB,YAAa,aACbC,aAAc,cAKDP,MAFfA,EAAWS,IAAMC,KAAKV,G,qQCvCtB,IAAMW,EAAgBC,IAAOC,IAAV,KAGR,SAACZ,GAAD,OAAWA,EAAMa,iBAAmB,KAChB,SAACb,GAAD,OAAWA,EAAMc,eAAgB,SAACd,GAAD,OAAWA,EAAMe,oBAC/C,SAACf,GAAD,OAAWA,EAAMgB,eAAgB,SAAChB,GAAD,OAAWA,EAAMiB,mBAKrE,SAASC,EAAKlB,GAQ3B,OAPAU,EAAcH,aAAe,CAC3BM,iBAA0C,GAAxBb,EAAMmB,MAAM,GAAGC,OAA4C,GAA7BpB,EAAMmB,MAAM,GAAGC,OAAS,GACxEN,YAAad,EAAMmB,MAAMC,OACzBJ,YAAahB,EAAMmB,MAAM,GAAGC,OAC5BL,iBAAkB,GAClBE,gBAAiB,IAGjB,kBAACP,EAAD,CAAef,GAAG,kBACfK,EAAMmB,MAAME,KAAI,SAACC,GAChB,OAAOA,EAAOD,KAAI,SAACE,GAAD,OAChB,kBAAC,EAAD,CAAUC,IAAG,cAASD,EAAS5B,IAAMO,KAAMqB,EAAUlB,YAAaL,EAAMK,YAAaC,aAAcN,EAAMM,sBAanHY,EAAKX,aAAe,CAClBY,MAAO,GACPd,YAAa,aACbC,aAAc,c,4DC3CHmB,EACF,sBADEA,EAEF,sBAFEA,EAGN,qBAHMA,EAIN,uBAJMA,EAKA,cCKPC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,YAAa,OACbC,MAAOH,EAAMI,QAAQC,QAAQC,cAE/BC,cAAe,CACbC,QAAS,OACTC,cAAe,MACfC,WAAY,OAEdC,KAAM,CACJC,UAAW,SACXT,MAAOH,EAAMI,QAAQC,QAAQC,cAE/BO,IAAK,CACHD,UAAW,SACXE,OAAQ,GACRJ,WAAY,MACZR,YAAa,MACba,OAAQ,EACRC,aAAc,EACdb,MAAOH,EAAMI,QAAQC,QAAQC,cAE/BW,OAAQ,CACNC,WAAY,mDACZC,UAAW,wCACXhB,MAAO,aAII,SAASiB,EAAOhD,GAAQ,IAAD,EACJiD,mBAAS,MADL,mBAC7BC,EAD6B,KACnBC,EADmB,KAO9BC,EAAc,WAClBD,EAAY,OAGRE,EAAsB,SAACC,GAC3BtD,EAAMuD,QAAQD,GACdF,KAGII,EAAU9B,IAEhB,OACE,kBAAC+B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYxD,UAAWoD,EAAQ3B,MAAOgC,QAAQ,MAA9C,cAGA,yBAAKzD,UAAWoD,EAAQrB,eACtB,kBAAC2B,EAAA,EAAD,CAAQ1D,UAAWoD,EAAQjB,KAAMwB,gBAAc,kBAAkBC,gBAAc,OAAOC,QAtB1E,SAACC,GACnBf,EAAYe,EAAEC,iBAqBR,cAGA,kBAACC,EAAA,EAAD,CAAMzE,GAAG,kBAAkBuD,SAAUA,EAAUmB,aAAW,EAACC,KAAMC,QAAQrB,GAAWsB,QAASpB,GAC3F,kBAACqB,EAAA,EAAD,CAAUR,QAAS,kBAAMZ,EAAoB5B,KAAqBA,GAClE,kBAACgD,EAAA,EAAD,CAAUR,QAAS,kBAAMZ,EAAoB5B,KAAqBA,GAClE,kBAACgD,EAAA,EAAD,CAAUR,QAAS,kBAAMZ,EAAoB5B,KAAuBA,GACpE,kBAACgD,EAAA,EAAD,CAAUR,QAAS,kBAAMZ,EAAoB5B,KAAiBA,GAC9D,kBAACgD,EAAA,EAAD,CAAUR,QAAS,kBAAMZ,EAAoB5B,KAAiBA,KAqBlE,yBAAKrB,UAAWoD,EAAQrB,eACtB,kBAAC2B,EAAA,EAAD,CAAQ1D,UAAWoD,EAAQf,IAAKwB,QAAS,kBAAMjE,EAAM0E,cAArD,cAMA,kBAACZ,EAAA,EAAD,CAAQ1D,UAAS,UAAKoD,EAAQf,IAAb,YAAoBe,EAAQX,QAAUoB,QAASjE,EAAM2E,iBAAtE,cACU3E,EAAM4E,sBCtG1B,SAASC,EAAU3E,EAAM4E,GACvBpF,KAAKQ,KAAOA,EACZR,KAAKoF,SAAWA,EAGH,SAASC,IACtBrF,KAAKsF,MAAQ,GCJf,SAASC,EAAUC,GACjB,IAAMC,GAAgC,IAAlBD,EAAU,KAA+B,IAAlBA,EAAU,GAC/CE,GAAiC,IAAlBF,EAAU,IAA8B,IAAjBA,EAAU,GAChDG,EAA+B,IAAjBH,EAAU,KAA8B,IAAlBA,EAAU,GAC9CI,EAAgC,IAAjBJ,EAAU,IAA6B,IAAjBA,EAAU,GACrD,OAAOC,GAAeC,GAAgBC,GAAeC,EAGhD,SAASC,EAAcC,EAAMC,GAElC,IAFiE,IAAzBC,EAAwB,wDAC5DC,EAAY,GACPtG,EAAMoG,EAAKpG,IAAM,EAAGA,GAAOoG,EAAKpG,IAAM,EAAGA,IAChD,IAAK,IAAIC,EAAMmG,EAAKnG,IAAM,EAAGA,GAAOmG,EAAKnG,IAAM,EAAGA,IAAO,CACvD,IAAMsG,EAAevG,IAAQoG,EAAKpG,KAAOC,IAAQmG,EAAKnG,IAChD4F,EAAY,CAAC7F,EAAMoG,EAAKpG,IAAKC,EAAMmG,EAAKnG,KAC9C,GAAID,GAAO,GAAKA,EAAMmG,EAAKpE,QAAU9B,GAAO,GAAKA,EAAMkG,EAAKnG,GAAK+B,SAAWwE,EAAc,CACxF,IAAMC,EAAWL,EAAKnG,GAAKC,IACvBoG,IAAoBA,IAAmBT,EAAUC,MAC9CW,EAASjG,SAAWiG,EAAStG,OAASJ,GACzCwG,EAAUG,KAAKD,KAMzB,OAAOF,EAGF,SAASI,EAAuBJ,EAAWH,GAIhD,OAHAG,EAAUK,SAAQ,SAACH,GACjBL,EAAKK,EAASxG,KAAKwG,EAASvG,KAAOkG,EAAKK,EAASxG,KAAKwG,EAASvG,KAAK2G,OAAO9G,MAEtEqG,EAGF,SAASU,EAAmBC,EAAIC,EAAIC,EAAIC,GAC7C,OAAOC,KAAKC,KAAK,SAACL,EAAKE,EAAO,GAAb,SAAkBD,EAAKE,EAAO,IAG1C,SAASG,EAAeC,GAC7B,OAAOH,KAAKI,MAAMJ,KAAKK,SAAWF,GAG7B,SAASG,EAAwBC,EAAKC,GAC3C,OAAOR,KAAKI,MAAMJ,KAAKK,UAAYG,EAAMD,GAAOA,GCzClD,SAASE,EAAiBC,EAAUC,EAASC,GAE3C,IADA,IAAMC,EAAa,QACaC,IAAzBJ,EAASC,EAAQvH,KAAqBuH,EAAQvH,KAAOwH,EAAMxH,KAChEuH,EAAUD,EAASC,EAAQvH,KACnBJ,KAAOJ,EACfiI,EAAWE,QAAQJ,GAErB,OAAOE,EAAWG,MAAM,GAGX,SAASC,EAAOhC,EAAM2B,EAAOM,GAA8B,IAAxB/B,IAAuB,yDACnEgC,EAAe,GACfC,EAAU,IAAI5C,EAClB4C,EAAQC,QAAQT,EAAO,GAEvB,IAAIF,EAAW,IAAIY,IAEfC,EAAS,IAAID,IACjBC,EAAOX,EAAMxH,IAAM,EAEnB,IAAIoI,EAAS,IAAIF,IAGjB,IAFAE,EAAOZ,EAAMxH,IAAMuG,EAAmBiB,EAAM7H,IAAK6H,EAAM9H,IAAKoI,EAAKnI,IAAKmI,EAAKpI,MAEnEsI,EAAQK,WAAW,CACzB,IAAId,EAAUS,EAAQM,UAKtB,GAJIf,IAAYC,GAASD,IAAYO,GAEnCC,EAAa5B,KAAKoB,EAAQjB,OAAO9G,IAE/B+H,EAAQvH,KAAO8H,EAAK9H,GACtB,MAAO,CAAC+H,EAAcV,EAAiBC,EAAUC,EAASC,IAE5D,IAAMxB,EAAYJ,EAAcC,EAAM0B,EAASxB,GAC/CF,EAAOO,EAAuBJ,EAAWH,GACzC,IAAK,IAAI0C,EAAI,EAAGA,EAAIvC,EAAUvE,OAAQ8G,IAAK,CACzC,IAAIrC,EAAWF,EAAUuC,GACrBC,EAAmBL,EAAOZ,EAAQvH,IAAMuG,EAAmBgB,EAAQ5H,IAAK4H,EAAQ7H,IAAKwG,EAASvG,IAAKuG,EAASxG,KAC1G+I,EAAkBN,EAAOO,IAAIxC,EAASlG,IAAMmI,EAAOjC,EAASlG,IAAME,IACpEsI,EAAmBC,IACrBnB,EAASpB,EAASlG,IAAMuH,EACxBY,EAAOjC,EAASlG,IAAMwI,EACtBJ,EAAOlC,EAASlG,IAAMmI,EAAOjC,EAASlG,IAAMuG,EAAmBL,EAASvG,IAAKuG,EAASxG,IAAKoI,EAAKnI,IAAKmI,EAAKpI,KAAOwG,EAASpG,OACrHkI,EAAQW,SAASzC,IACpB8B,EAAQC,QAAQ/B,EAAUkC,EAAOlC,EAASlG,OAKlD,OAAO,KChDT,SAAS4I,EAAgBC,EAAMtB,GAE7B,IADA,IAAME,EAAa,QACSC,IAArBmB,EAAKtB,EAAQvH,KAClBuH,EAAUsB,EAAKtB,EAAQvH,IACvByH,EAAWE,QAAQJ,EAAQjB,OAAO9G,IAEpC,OAAOiI,EAAWG,MAAM,GCVX,SAASkB,IACtB/I,KAAKgJ,SAAW,GCGlB,SAASH,EAAgBtB,EAAUC,EAASC,GAE1C,IADA,IAAMC,EAAa,QACaC,IAAzBJ,EAASC,EAAQvH,MACtBuH,EAAUD,EAASC,EAAQvH,KACfA,KAAOwH,EAAMxH,IAGzByH,EAAWE,QAAQJ,EAAQjB,OAAO9G,IAEpC,OAAOiI,ECMM,SAASuB,EAAInD,EAAM2B,EAAOM,GACvC,IAAImB,EAAI,CAACzB,GACLO,EAAe,GACfmB,EAAW,IAAIhB,IACfZ,EAAW,IAAIY,IACnBgB,EAAS1B,EAAMxH,KAAM,EACrB,IAN6C,iBAO3C,IAAIuH,EAAU0B,EAAEE,MAIhB,GAHI5B,EAAQvH,KAAOwH,EAAMxH,IAAMuH,EAAQvH,KAAO8H,EAAK9H,IACjD+H,EAAa5B,KAAKoB,EAAQjB,OAAO9G,IAE/B+H,EAAQvH,KAAO8H,EAAK9H,GACtB,MAAM,CAAN,EAAO,CAAC+H,EAAcA,IAExBmB,EAAS3B,EAAQvH,KAAM,EACvBuH,EAAQtH,SAAU,EAhCtB,SAAsB4F,EAAMC,GAC1B,IAAIsD,EAAQ,GAaZ,OAZItD,EAAKpG,IAAM,IAAMmG,EAAKC,EAAKpG,IAAM,GAAGoG,EAAKnG,KAAKM,SAAW4F,EAAKC,EAAKpG,IAAM,GAAGoG,EAAKnG,KAAKC,OAASJ,GACjG4J,EAAMzB,QAAQ9B,EAAKC,EAAKpG,IAAM,GAAGoG,EAAKnG,MAEpCmG,EAAKpG,IAAMmG,EAAKpE,OAAS,IAAMoE,EAAKC,EAAKpG,IAAM,GAAGoG,EAAKnG,KAAKM,SAAW4F,EAAKC,EAAKpG,IAAM,GAAGoG,EAAKnG,KAAKC,OAASJ,GAC/G4J,EAAMzB,QAAQ9B,EAAKC,EAAKpG,IAAM,GAAGoG,EAAKnG,MAEpCmG,EAAKnG,IAAM,IAAMkG,EAAKC,EAAKpG,KAAKoG,EAAKnG,IAAM,GAAGM,SAAW4F,EAAKC,EAAKpG,KAAKoG,EAAKnG,IAAM,GAAGC,OAASJ,GACjG4J,EAAMzB,QAAQ9B,EAAKC,EAAKpG,KAAKoG,EAAKnG,IAAM,IAEtCmG,EAAKnG,IAAMkG,EAAK,GAAGpE,OAAS,IAAMoE,EAAKC,EAAKpG,KAAKoG,EAAKnG,IAAM,GAAGM,SAAW4F,EAAKC,EAAKpG,KAAKoG,EAAKnG,IAAM,GAAGC,OAASJ,GAClH4J,EAAMzB,QAAQ9B,EAAKC,EAAKpG,KAAKoG,EAAKnG,IAAM,IAEnCyJ,EAmBLC,CAAaxD,EAAM0B,GAASlB,SAAQ,SAACH,GAC9BgD,EAAShD,EAASlG,MACrBsH,EAASpB,EAASlG,IAAMuH,EACxB0B,EAAE9C,KAAKD,QAbN+C,EAAExH,QAAQ,CAAC,IAAD,wCAiBjB,OAAO,KNjCT2D,EAAckE,UAAUrB,QAAU,SAAU1H,EAAM4E,GAGhD,IAFA,IAAIoE,EAAY,IAAIrE,EAAU3E,EAAM4E,GAChCqE,GAAU,EACLjB,EAAI,EAAGA,EAAIxI,KAAKsF,MAAM5D,OAAQ8G,IACrC,GAAIxI,KAAKsF,MAAMkD,GAAGpD,SAAWoE,EAAUpE,SAAU,CAC/CpF,KAAKsF,MAAMoE,OAAOlB,EAAG,EAAGgB,GACxBC,GAAU,EACV,MAGCA,GACHzJ,KAAKsF,MAAMc,KAAKoD,IAIpBnE,EAAckE,UAAUhB,QAAU,WAChC,OAAIvI,KAAKsF,MAAM5D,OAAS,EACf1B,KAAKsF,MAAMqE,QAAQnJ,MAE1BoJ,QAAQC,IAAI,aACL,OAIXxE,EAAckE,UAAUO,MAAQ,WAC9B,OAAI9J,KAAKsF,MAAM5D,OAAS,EACf1B,KAAKsF,MAAM,GAAG9E,MAErBoJ,QAAQC,IAAI,SACL,OAIXxE,EAAckE,UAAUQ,KAAO,WAC7B,OAAI/J,KAAKsF,MAAM5D,OAAS,EACf1B,KAAKsF,MAAMtF,KAAKsF,MAAM5D,OAAS,GAAGlB,MAEzCoJ,QAAQC,IAAI,SACL,OAIXxE,EAAckE,UAAUjB,QAAU,WAChC,OAA6B,IAAtBtI,KAAKsF,MAAM5D,QAGpB2D,EAAckE,UAAUX,SAAW,SAAUoB,GAC3C,OAAOhK,KAAKsF,MAAM2E,SAASD,IIpD7BjB,EAAMQ,UAAUrB,QAAU,SAAU1D,GAClCxE,KAAKgJ,SAAS5C,KAAK5B,IAGrBuE,EAAMQ,UAAUhB,QAAU,WACxB,OAAOvI,KAAKgJ,SAASW,SAGvBZ,EAAMQ,UAAUjB,QAAU,WACxB,OAAgC,IAAzBtI,KAAKgJ,SAAStH,QAGvBqH,EAAMQ,UAAUW,KAAO,WACrB,OAAQlK,KAAKsI,eAA+BX,EAAnB3H,KAAKgJ,SAAS,IAGzCD,EAAMQ,UAAU7H,OAAS,WACvB,OAAO1B,KAAKgJ,SAAStH,Q,IGrBFyI,E,WACnB,WAAYxK,EAAKC,GAAwC,IAAnCwK,IAAkC,yDAAnBC,EAAmB,4EACtDrK,KAAKL,IAAMA,EACXK,KAAKJ,IAAMA,EACXI,KAAKC,GAAL,mBAAsBN,EAAtB,YAA6BC,GAC7BI,KAAKoK,OAASA,EACdpK,KAAKqK,UAAYA,EACjBrK,KAAKE,SAAU,E,iEAGIoK,EAAYC,GAC/B,IAAMC,EAAUxK,KAAKL,IAAM2K,EAAW3K,IAChC8K,EAAUzK,KAAKJ,IAAM0K,EAAW1K,IAClC8K,OAAS/C,EAUb,OATgB,IAAZ6C,EACFE,EAAS,CAAC1K,KAAKL,IAAM,EAAGK,KAAKJ,MACP,IAAb4K,EACTE,EAAS,CAAC1K,KAAKL,IAAM,EAAGK,KAAKJ,KACR,IAAZ6K,EACTC,EAAS,CAAC1K,KAAKL,IAAKK,KAAKJ,IAAM,IACT,IAAb6K,IACTC,EAAS,CAAC1K,KAAKL,IAAKK,KAAKJ,IAAM,IAE7B8K,GACgBA,EAAO,IAAM,GAAKA,EAAO,GAAKH,EAAK7I,QAAUgJ,EAAO,IAAM,GAAKA,EAAO,GAAKH,EAAK,GAAG7I,OAClFgJ,OAEnB,I,wCAIcH,GAChB,IAAII,EAAQ,GAaZ,OAZI3K,KAAKL,IAAM,GAAK4K,EAAKvK,KAAKL,IAAM,GAAGK,KAAKJ,KAAKwK,QAC/CO,EAAMvE,KAAKmE,EAAKvK,KAAKL,IAAM,GAAGK,KAAKJ,MAEjCI,KAAKL,IAAM4K,EAAK7I,OAAS,GAAK6I,EAAKvK,KAAKL,IAAM,GAAGK,KAAKJ,KAAKwK,QAC7DO,EAAMvE,KAAKmE,EAAKvK,KAAKL,IAAM,GAAGK,KAAKJ,MAEjCI,KAAKJ,IAAM,GAAK2K,EAAKvK,KAAKL,KAAKK,KAAKJ,IAAM,GAAGwK,QAC/CO,EAAMvE,KAAKmE,EAAKvK,KAAKL,KAAKK,KAAKJ,IAAM,IAEnCI,KAAKJ,IAAM2K,EAAK,GAAG7I,OAAS,GAAK6I,EAAKvK,KAAKL,KAAKK,KAAKJ,IAAM,GAAGwK,QAChEO,EAAMvE,KAAKmE,EAAKvK,KAAKL,KAAKK,KAAKJ,IAAM,IAEhC+K,I,0CAIP3K,KAAKqK,WAAY,EACjBrK,KAAKoK,QAAS,I,kCAIdpK,KAAKoK,QAAS,EACdpK,KAAKqK,WAAY,M,KCnDfO,GACQ,EADRA,GAEM,EAqEG,SAASC,GAAwBC,EAAMC,EAAMC,EAAWC,GACrE,IAAIV,EArDN,SAA0BO,EAAMC,GAE9B,IADA,IAAIR,EAAO,GACF5K,EAAM,EAAGA,EAAMmL,EAAMnL,IAAO,CAEnC,IADA,IAAIuL,EAAS,GACJtL,EAAM,EAAGA,EAAMmL,EAAMnL,IAC5BsL,EAAO9E,KAAK,IAAI+D,EAASxK,EAAKC,GAAK,GAAO,IAE5C2K,EAAKnE,KAAK8E,GAEZ,OAAOX,EA4CIY,CAAiBL,EAAMC,GAGlC,OA5CF,SAASK,EAAOb,EAAMc,EAAOrI,EAAQsI,EAAUC,EAAQC,EAAUC,EAAQC,GACvE,KAAIL,EAAQ,GAAKrI,EAAS,GAA1B,CAcA,IAZA,IAAM2I,EAAaD,IAAgBd,GAG7BgB,EAAS/E,KAAKI,MAAMsE,EAAS,GAAOD,EACpCO,EAAShF,KAAKI,MAAMwE,EAAS,GAAOD,EAGpCM,EAAUH,EAAaC,EAASzE,EAAwBmE,EAAUC,GAClEQ,EAAUJ,EAAaxE,EAAwBqE,EAAUC,GAAUI,EAEnEnK,EAASiK,EAAaF,EAASD,EAAWD,EAASD,EAEhD9C,EAAI,EAAGA,EAAI9G,EAAQ8G,IAAK,CAC/B,IAAM7I,EAAMgM,EAAaC,EAASN,EAAW9C,EACvC5I,EAAM+L,EAAaH,EAAWhD,EAAIqD,GACnCF,GAAc/L,IAAQmM,IAAcJ,GAAchM,IAAQmM,IAC7DvB,EAAK5K,GAAKC,GAAKoM,YAInB,IAAIC,EAAIN,EAAaN,EAAQxE,KAAKI,MAAMoE,EAAQ,GAC5Ca,EAAIP,EAAa9E,KAAKI,MAAMjE,EAAS,GAAOA,EAC5CmJ,EAAKb,EACLc,EAAKT,EAAaC,EAASL,EAC3Bc,EAAKb,EACLc,EAAKX,EAAaF,EAASI,EAE/BT,EAAOb,EAAM0B,EAAGC,EAAGC,EAAIC,EAAIC,EAAIC,EAAIC,GAAgBN,EAAGC,IAOtDd,EAAOb,EAAM0B,EAAGC,EALhBC,EAAKR,EAAaC,EAASN,EAC3Bc,EAAKb,EACLc,EAAKV,EAAaH,EAAWK,EAC7BS,EAAKb,EAE8Bc,GAAgBN,EAAGC,KAKtDd,CAAOb,EAAMQ,EAAMD,EAAM,EAAGA,EAAM,EAAGC,EAAMwB,GAAgBxB,EAAMD,IApEnE,SAA8BP,EAAMS,EAAWC,GAE7C,IADA,IAAIuB,EAAqB,GAChB7M,EAAM,EAAGA,EAAM4K,EAAK7I,OAAQ/B,IACnC,IAAK,IAAIC,EAAM,EAAGA,EAAM2K,EAAK5K,GAAK+B,OAAQ9B,IAAO,CAC/C,IAAM6M,EAAU9M,IAAQqL,EAAUrL,KAAOC,IAAQoL,EAAUpL,IACrD8M,EAAS/M,IAAQsL,EAAStL,KAAOC,IAAQqL,EAASrL,KACpD2K,EAAK5K,GAAKC,GAAKwK,QAAWqC,GAAYC,GACxCF,EAAmBpG,KAAK,IAAI1G,EAASC,EAAKC,EAAKH,IAIrD,OAAO+M,EA0DWG,CAAqBpC,EAAMS,EAAWC,GAiC1D,SAASsB,GAAgBlB,EAAOrI,GAC9B,OAAIqI,EAAQrI,EAAe4H,GAClB5H,EAASqI,EAAcT,GACE,IAAtB7D,EAAe,GAAW6D,GAAyBA,GCrGjE,IAAIgC,GAAa,SAACtM,GAChB,IAAMuM,EAAoBhG,KAAKiG,MAAMxM,EAAMyM,SAAW,GAChDC,EAAoBnG,KAAKiG,MAA0B,GAApBxM,EAAM2M,aACrCC,EAAmBrG,KAAKiG,MAAMxM,EAAMyM,SAAW,GAC/CI,EAAmBtG,KAAKiG,MAAMxM,EAAM2M,YAAkC,GAApB3M,EAAM2M,aAJpC,EAwBF1J,mBAlBD,SAACuH,EAAMC,GAE5B,IADA,IAAMjF,EAAO,GACJnG,EAAM,EAAGA,EAAMmL,EAAMnL,IAAO,CAEnC,IADA,IAAMuL,EAAS,GACNtL,EAAM,EAAGA,EAAMmL,EAAMnL,IACxBD,IAAQkN,GAAqBjN,IAAQoN,EACvC9B,EAAO9E,KAAK,IAAI1G,EAASC,EAAKC,EAAKH,IAC1BE,IAAQuN,GAAoBtN,IAAQuN,EAC7CjC,EAAO9E,KAAK,IAAI1G,EAASC,EAAKC,EAAKH,IAEnCyL,EAAO9E,KAAK,IAAI1G,EAASC,EAAKC,EAAKH,IAGvCqG,EAAKM,KAAK8E,GAEZ,OAAOpF,EAGwBsH,CAAe9M,EAAMyM,SAAUzM,EAAM2M,cAxB5C,mBAwBnBnH,EAxBmB,KAwBbuH,EAxBa,OAyBQ9J,mBAASuC,EAAK+G,GAAmBG,IAzBzC,mBAyBnBhC,EAzBmB,KAyBRsC,EAzBQ,OA0BM/J,mBAASuC,EAAKoH,GAAkBC,IA1BtC,mBA0BnBlC,EA1BmB,KA0BTsC,EA1BS,OA2BchK,mBAASxB,GA3BvB,mBA2BnByL,EA3BmB,KA2BLC,EA3BK,OA4BYlK,oBAAS,GA5BrB,mBA4BnBmK,EA5BmB,KA4BNC,EA5BM,OA6BcpK,oBAAS,GA7BvB,mBA6BnBqK,EA7BmB,KA6BLC,EA7BK,OA8BoBtK,wBAASoE,GA9B7B,oBA8BnBmG,GA9BmB,MA8BFC,GA9BE,SA+BYxK,wBAASoE,GA/BrB,qBA+BnBqG,GA/BmB,MA+BNC,GA/BM,SAgCQ1K,wBAASoE,GAhCjB,qBAgCnBuG,GAhCmB,MAgCRC,GAhCQ,MAwEpBC,GAAsB,SAACzO,EAAKC,GAChC,IAAMyO,EAAUvI,EAAK+B,QAErB,OADAwG,EAAQ1O,GAAKC,GAAOyO,EAAQ1O,GAAKC,GAAK2G,OAAO9G,GACtC4O,GA+FHC,GAAc,SAACtG,EAAcuG,GACjCvG,EAAa1B,SAAQ,SAACkI,EAAahG,GACjCiG,YAAW,WACTC,SAASC,eAAeH,EAAYvO,IAAIS,UAAxC,sBACC,GAAK8H,GACJA,EAAI,IAAMR,EAAatG,QACzB+M,YAAW,WACTG,GAA2BL,KAC1B,GAAK/F,OAMRoG,GAA6B,SAACL,GAClCA,EAAmBjI,SAAQ,SAACuI,EAAWrG,GACrCiG,YAAW,WACTC,SAASC,eAAeE,EAAU5O,IAAIS,UAAY,oBACjD,GAAK8H,OAIZ,OACE,kBAAC,IAAMsG,SAAP,KACE,kBAACxL,EAAD,CAAQ0B,UAhKM,WAChB,IAAIqJ,EAAUvI,EAAK+B,QACnBwG,EAAQ/H,SAAQ,SAAC3G,GACfA,EAAI2G,SAAQ,SAACyI,GACPA,EAAKpP,MAAQkN,GAAqBkC,EAAKnP,MAAQoN,GACjDqB,EAAQU,EAAKpP,KAAKoP,EAAKnP,KAAOmP,EAAKxI,OAAO9G,GAC1CiP,SAASC,eAAeI,EAAK9O,IAAIS,UAAY,wBACpCqO,EAAKpP,MAAQuN,GAAoB6B,EAAKnP,MAAQuN,GACvDkB,EAAQU,EAAKpP,KAAKoP,EAAKnP,KAAOmP,EAAKxI,OAAO9G,GAC1CiP,SAASC,eAAeI,EAAK9O,IAAIS,UAAY,wBAE7C2N,EAAQU,EAAKpP,KAAKoP,EAAKnP,KAAOmP,EAAKxI,OAAO9G,GAC1CiP,SAASC,eAAeI,EAAK9O,IAAIS,UAAY,mBAInD2M,EAAQgB,GACRf,EAAae,EAAQxB,GAAmBG,IACxCO,EAAYc,EAAQnB,GAAkBC,KA8INtJ,QAAS4J,EAAiBvI,iBAAkBsI,EAAcvI,gBA/DpE,WACtB,IAAI+J,OAASrH,EACb,OAAQ6F,GACN,KAAKzL,EACHiN,EAASlH,EAAOhC,EAAMkF,EAAWC,GAAU,GAC3C,MACF,KAAKlJ,EACHiN,EAASlH,EAAOhC,EAAMkF,EAAWC,GAAU,GAC3C,MACF,KAAKlJ,EACHiN,EAAS/F,EAAInD,EAAMkF,EAAWC,GAC9B,MACF,KAAKlJ,EACHiN,EJ7IO,SAAalJ,EAAM2B,EAAOM,GACvC,IAAIkH,EAAI,IAAIlG,EACRf,EAAe,GACfT,EAAW,IAAIY,IAEnB,IADA8G,EAAE/G,QAAQT,IACFwH,EAAE3G,WAAW,CACnB,IAAId,EAAUyH,EAAE1G,UAIhB,GAHIf,IAAYC,GAASD,IAAYO,GACnCC,EAAa5B,KAAKoB,EAAQjB,OAAO9G,IAE/B+H,EAAQvH,KAAO8H,EAAK9H,GACtB,MAAO,CAAC+H,EAAca,EAAgBtB,EAAUC,EAASC,IAE3D,IAAMxB,EAAYJ,EAAcC,EAAM0B,GAAS,GAC/C1B,EAAOO,EAAuBJ,EAAWH,GACzC,IAAK,IAAI0C,EAAI,EAAGA,EAAIvC,EAAUvE,OAAQ8G,IAAK,CACzC,IAAMrC,EAAWF,EAAUuC,GAC3BjB,EAASpB,EAASlG,IAAMuH,EACxByH,EAAE/G,QAAQ/B,IAGd,OAAO,KIwHQ+I,CAAIpJ,EAAMkF,EAAWC,GAC9B,MACF,KAAKlJ,EACHiN,ENnJO,SAAmBlJ,EAAM2B,EAAOM,GAC7C,IAAIoH,EAAO,IAAIhH,IACfgH,EAAK1H,EAAMxH,IAAM,EAEjB,IAAI6I,EAAO,IAAIX,IACXH,EAAe,GAEfoH,EAAW,IAAI/J,EACnB+J,EAASlH,QAAQT,EAAO0H,EAAK1H,EAAMxH,KAEnC,IAAK,IAAIN,EAAM,EAAGA,EAAMmG,EAAKpE,OAAQ/B,IACnC,IAAK,IAAIC,EAAM,EAAGA,EAAMkG,EAAKnG,GAAK+B,OAAQ9B,IAAO,CAC/C,IAAMmG,EAAOD,EAAKnG,GAAKC,GACnBmG,EAAK9F,KAAOwH,EAAMxH,KACpBkP,EAAKpJ,EAAK9F,IAAME,IAChB2I,EAAK/C,EAAK9F,SAAM0H,GAItB,MAAQyH,EAAS9G,WAAW,CAC1B,IAAId,EAAU4H,EAAS7G,UAIvB,GAHIf,IAAYC,GAASD,IAAYO,GACnCC,EAAa5B,KAAKoB,EAAQjB,OAAO9G,IAE/B+H,EAAQvH,KAAO8H,EAAK9H,GACtB,MAAO,CAAC+H,EAAca,EAAgBC,EAAMtB,IAE9C,IAAMvB,EAAYJ,EAAcC,EAAM0B,GAAS,GAC/C1B,EAAOO,EAAuBJ,EAAWH,GACzC,IAAK,IAAI0C,EAAI,EAAGA,EAAIvC,EAAUvE,OAAQ8G,IAAK,CACzC,IAAMrC,EAAWF,EAAUuC,GACrB6G,EAAMF,EAAK3H,EAAQvH,IAAMkG,EAASpG,OACpCsP,EAAMF,EAAKhJ,EAASlG,MACtBkP,EAAKhJ,EAASlG,IAAMoP,EACpBvG,EAAK3C,EAASlG,IAAMuH,EACf4H,EAASxG,SAASzC,IACrBiJ,EAASlH,QAAQ/B,EAAUgJ,EAAKhJ,EAASlG,OAMjD,OAAO,KMyGQqP,CAAUxJ,EAAMkF,EAAWC,GACpC,MAaF,QACE+D,EAASlH,EAAOhC,EAAMkF,EAAWC,GAAU,GAG/C,IAAMjD,EAAegH,EAAO,GACtBT,EAAqBS,EAAO,GAClCV,GAAYtG,EAAcuG,IA2BkGgB,QA3I9G,WACd,IAAMC,EAAiB3E,GAAwBvK,EAAMyM,SAAUzM,EAAM2M,YAAajC,EAAWC,GACzFoD,EAAU,GACdmB,EAAelJ,SAAQ,SAACmJ,EAAUjH,GAChC6F,EAAUD,GAAoBqB,EAAS9P,IAAK8P,EAAS7P,KACrD6O,YAAW,WACTC,SAASC,eAAec,EAASxP,IAAIS,UAArC,wBACC,GAAK8H,GACJA,EAAI,IAAMgH,EAAe9N,QAC3B+M,YAAW,WACTpB,EAAQgB,KAEP,GAAK7F,SAgIV,yBAAK9H,UAAU,cAAcgP,UAAW,kBA9E1C/B,GAAe,QACXC,IACFC,GAAgB,GACZC,KAAoBrO,EACtB6N,EAAaxH,EAAKoI,GAAU,IAAIA,GAAU,KAE1CX,EAAYzH,EAAKoI,GAAU,IAAIA,GAAU,KAE3CH,QAAmBpG,GACnBsG,QAAetG,GACfwG,QAAaxG,OAqEX,kBAACnG,EAAD,CAAMC,MAAOqE,EAAMnF,YA/GD,SAAChB,EAAKC,GAE5B,GADA+N,GAAe,GACX7H,EAAKnG,GAAKC,GAAKC,OAASJ,GAAkBqG,EAAKnG,GAAKC,GAAKC,OAASJ,EACpEoO,GAAgB,GAChBE,GAAmBjI,EAAKnG,GAAKC,GAAKC,MAClCoO,GAAe,CAACtO,EAAKC,QAChB,CACL,IAAMyO,EAAUD,GAAoBzO,EAAKC,GACzCyN,EAAQgB,KAuG2CzN,aAnG9B,SAACjB,EAAKC,GAC7B,GAAK8N,GACD5H,EAAKnG,GAAKC,GAAKC,OAASJ,GAAkBqG,EAAKnG,GAAKC,GAAKC,OAASJ,EACtE,GAAImO,EAAc,CAChBO,GAAa,CAACxO,EAAKC,IACnB,IAAMyO,EAxBiB,SAACsB,EAASC,EAASC,EAAOC,GACnD,IAAIzB,EAAUvI,EAAK+B,QAGnB,OAFAwG,EAAQsB,GAASC,GAAWvB,EAAQsB,GAASC,GAASrJ,OAAO9G,GAC7D4O,EAAQwB,GAAOC,GAASzB,EAAQwB,GAAOC,GAAOvJ,OAAOuH,IAC9CO,EAoBW0B,CACd/B,GAAY,GACZA,GAAY,GACZrO,EACAC,GAEFyN,EAAQgB,GACRJ,GAAe,CAACtO,EAAKC,QAChB,CACL,IAAMyO,EAAUD,GAAoBzO,EAAKC,GACzCyN,EAAQgB,UA+FdzB,GAAW/L,aAAe,CACxBkM,SAAU,GACVE,YAAa,IAKAL,OAFfA,GAAa9L,IAAMC,KAAK6L,ICrNToD,OARf,WACE,OACE,yBAAKtP,UAAU,OACb,kBAAC,GAAD,CAAYqM,SAAU,GAAIE,YAAa,OCKzBpI,QACW,cAA7BoL,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnH,QAAQmH,MAAMA,EAAMC,c","file":"static/js/main.aef364e5.chunk.js","sourcesContent":["export const CellType = {\r\n  STANDARD: \"grid-cell\",\r\n  START: \"start-cell\",\r\n  GOAL: \"goal-cell\",\r\n  BARRIER: \"wall-cell\",\r\n  WEIGHTED: \"weighted-cell\",\r\n  VISITED: \"visited\",\r\n  ADDED_TO_ROUTE: \"route\",\r\n  NUM_CELLTYPES: \"7\",\r\n};\r\n\r\nexport class CellData {\r\n  constructor(row, col, type = CellType.STANDARD, isSelected = false, weight = 0.0) {\r\n    this.row = row;\r\n    this.col = col;\r\n    this.id = `cell_${row}_${col}`;\r\n    this.type = type;\r\n    this.isSelected = isSelected;\r\n    this.visited = type === (CellType.VISITED || CellType.ADDED_TO_ROUTE) ? true : false;\r\n    this.weight = type === CellType.WEIGHTED ? weight : type === CellType.BARRIER ? Infinity : 0;\r\n  }\r\n\r\n  asType(newType) {\r\n    return new CellData(this.row, this.col, newType, this.isSelected);\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CellData, CellType } from \"../datastructures/CellData\";\r\nimport \"./GridCell.css\";\r\n\r\nlet GridCell = (props) => {\r\n  const cType = props.data.type;\r\n  const subclass =\r\n    cType === CellType.START\r\n      ? \" start-cell\"\r\n      : cType === CellType.GOAL\r\n      ? \" goal-cell\"\r\n      : cType === CellType.WEIGHTED\r\n      ? \" weighted-cell\"\r\n      : cType === CellType.BARRIER\r\n      ? \" wall-cell\"\r\n      : cType === CellType.VISITED\r\n      ? \" visited\"\r\n      : cType === CellType.ADDED_TO_ROUTE\r\n      ? \" route\"\r\n      : \"\";\r\n\r\n  return (\r\n    <div\r\n      id={props.data.id}\r\n      className={`grid-cell${subclass}`}\r\n      onMouseDown={() => props.onMouseDown(props.data.row, props.data.col)}\r\n      onMouseEnter={() => props.onMouseEnter(props.data.row, props.data.col)}\r\n    ></div>\r\n  );\r\n};\r\n\r\nGridCell.propTypes = {\r\n  data: PropTypes.instanceOf(CellData),\r\n  onMouseDown: PropTypes.func,\r\n  onMouseEnter: PropTypes.func,\r\n};\r\n\r\nGridCell.defaultProps = {\r\n  data: new CellData(),\r\n  onMouseDown: () => void 0,\r\n  onMouseEnter: () => void 0,\r\n};\r\n\r\nGridCell = React.memo(GridCell);\r\n\r\nexport default GridCell;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport GridCell from \"./GridCell\";\r\n\r\nconst GridContainer = styled.div`\r\n  display: grid;\r\n  gap: 1px 1px;\r\n  width: ${(props) => props.totalWidthPixels + 1}px;\r\n  grid-template-rows: repeat(${(props) => props.cellsPerRow}, ${(props) => props.cellHeightPixels}px);\r\n  grid-template-columns: repeat(${(props) => props.cellsPerCol}, ${(props) => props.cellWidthPixels}px);\r\n  padding: 2px;\r\n  background-color: lightgray;\r\n`;\r\n\r\nexport default function Grid(props) {\r\n  GridContainer.defaultProps = {\r\n    totalWidthPixels: props.cells[0].length * 30 + (props.cells[0].length - 2) * 1 /* (NumCols * colWidth) + (NumInternalCols * ColGap) */,\r\n    cellsPerRow: props.cells.length,\r\n    cellsPerCol: props.cells[0].length,\r\n    cellHeightPixels: 30,\r\n    cellWidthPixels: 30,\r\n  };\r\n  return (\r\n    <GridContainer id=\"grid-container\">\r\n      {props.cells.map((rowArr) => {\r\n        return rowArr.map((cellData) => (\r\n          <GridCell key={`key_${cellData.id}`} data={cellData} onMouseDown={props.onMouseDown} onMouseEnter={props.onMouseEnter} />\r\n        ));\r\n      })}\r\n    </GridContainer>\r\n  );\r\n}\r\n\r\nGrid.propTypes = {\r\n  cells: PropTypes.array,\r\n  onMouseDown: PropTypes.func,\r\n  onMouseEnter: PropTypes.func,\r\n};\r\n\r\nGrid.defaultProps = {\r\n  cells: [],\r\n  onMouseDown: () => void 0,\r\n  onMouseEnter: () => void 0,\r\n};\r\n","export const Algorithm = {\r\n  ASTAR_8: \"A* (8-Connectivity)\",\r\n  ASTAR_4: \"A* (4-Connectivity)\",\r\n  DFS: \"Depth-First Search\",\r\n  BFS: \"Breadth-First Search\",\r\n  DIJIKSTRA: \"Dijikstra's\",\r\n  SWARM: \"Swarm\",\r\n  CONVERGENT_SWARM: \"Convergent Swarm\",\r\n  BIDIRECTIONAL_SWARM: \"Bi-directional Swarm\",\r\n  GREEDY_BEST_FS: \"Greedy Best-First Search\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Algorithm } from \"./enums\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    marginRight: \"1rem\",\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  itemContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    marginLeft: \"1em\",\r\n  },\r\n  menu: {\r\n    textAlign: \"center\",\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  btn: {\r\n    textAlign: \"center\",\r\n    height: 35,\r\n    marginLeft: \"5px\",\r\n    marginRight: \"5px\",\r\n    border: 0,\r\n    borderRadius: 3,\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  runBtn: {\r\n    background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\r\n    boxShadow: \"0 3px 5px 2px rgba(255, 105, 135, .3)\",\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nexport default function TopBar(props) {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleClick = (e) => {\r\n    setAnchorEl(e.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleAlgoSelection = (algo) => {\r\n    props.setAlgo(algo);\r\n    handleClose();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography className={classes.title} variant=\"h4\">\r\n          Pathfinder\r\n        </Typography>\r\n        <div className={classes.itemContainer}>\r\n          <Button className={classes.menu} aria-controls=\"algorithms-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n            Algorithms\r\n          </Button>\r\n          <Menu id=\"algorithms-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\r\n            <MenuItem onClick={() => handleAlgoSelection(Algorithm.ASTAR_8)}>{Algorithm.ASTAR_8}</MenuItem>\r\n            <MenuItem onClick={() => handleAlgoSelection(Algorithm.ASTAR_4)}>{Algorithm.ASTAR_4}</MenuItem>\r\n            <MenuItem onClick={() => handleAlgoSelection(Algorithm.DIJIKSTRA)}>{Algorithm.DIJIKSTRA}</MenuItem>\r\n            <MenuItem onClick={() => handleAlgoSelection(Algorithm.DFS)}>{Algorithm.DFS}</MenuItem>\r\n            <MenuItem onClick={() => handleAlgoSelection(Algorithm.BFS)}>{Algorithm.BFS}</MenuItem>\r\n            {/* <MenuItem\r\n              onClick={() => handleAlgoSelection(Algorithm.GREEDY_BEST_FS)}\r\n            >\r\n              {Algorithm.GREEDY_BEST_FS}\r\n            </MenuItem>\r\n            <MenuItem onClick={() => handleAlgoSelection(Algorithm.SWARM)}>\r\n              {Algorithm.SWARM}\r\n            </MenuItem>\r\n            <MenuItem\r\n              onClick={() => handleAlgoSelection(Algorithm.CONVERGENT_SWARM)}\r\n            >\r\n              {Algorithm.CONVERGENT_SWARM}\r\n            </MenuItem>\r\n            <MenuItem\r\n              onClick={() => handleAlgoSelection(Algorithm.BIDIRECTIONAL_SWARM)}\r\n            >\r\n              {Algorithm.BIDIRECTIONAL_SWARM}\r\n            </MenuItem> */}\r\n          </Menu>\r\n        </div>\r\n        <div className={classes.itemContainer}>\r\n          <Button className={classes.btn} onClick={() => props.clearGrid()}>\r\n            Clear Grid\r\n          </Button>\r\n          {/* <Button className={classes.btn} onClick={() => props.genMaze()}>\r\n            Generate Maze\r\n          </Button> */}\r\n          <Button className={`${classes.btn} ${classes.runBtn}`} onClick={props.runAnimatedAlgo}>\r\n            {`Run ${props.selectedAlgoName}`}\r\n          </Button>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","function PQElement(data, priority) {\r\n  this.data = data;\r\n  this.priority = priority;\r\n}\r\n\r\nexport default function PriorityQueue() {\r\n  this.items = [];\r\n}\r\n\r\nPriorityQueue.prototype.enqueue = function (data, priority) {\r\n  var pqelement = new PQElement(data, priority);\r\n  var contain = false;\r\n  for (var i = 0; i < this.items.length; i++) {\r\n    if (this.items[i].priority > pqelement.priority) {\r\n      this.items.splice(i, 0, pqelement);\r\n      contain = true;\r\n      break;\r\n    }\r\n  }\r\n  if (!contain) {\r\n    this.items.push(pqelement);\r\n  }\r\n};\r\n\r\nPriorityQueue.prototype.dequeue = function () {\r\n  if (this.items.length > 0) {\r\n    return this.items.shift().data;\r\n  } else {\r\n    console.log(\"Underflow\");\r\n    return null;\r\n  }\r\n};\r\n\r\nPriorityQueue.prototype.front = function () {\r\n  if (this.items.length > 0) {\r\n    return this.items[0].data;\r\n  } else {\r\n    console.log(\"Empty\");\r\n    return null;\r\n  }\r\n};\r\n\r\nPriorityQueue.prototype.rear = function () {\r\n  if (this.items.length > 0) {\r\n    return this.items[this.items.length - 1].data;\r\n  } else {\r\n    console.log(\"Empty\");\r\n    return null;\r\n  }\r\n};\r\n\r\nPriorityQueue.prototype.isEmpty = function () {\r\n  return this.items.length === 0;\r\n};\r\n\r\nPriorityQueue.prototype.contains = function (element) {\r\n  return this.items.includes(element);\r\n};\r\n","import { CellType } from \"../datastructures/CellData\";\r\n\r\nfunction is_corner(coordDiff) {\r\n  const isUpperLeft = coordDiff[0] === -1 && coordDiff[1] === -1;\r\n  const isUpperRight = coordDiff[0] === -1 && coordDiff[1] === 1;\r\n  const isLowerLeft = coordDiff[0] === 1 && coordDiff[1] === -1;\r\n  const isLowerRight = coordDiff[0] === 1 && coordDiff[1] === 1;\r\n  return isUpperLeft || isUpperRight || isLowerLeft || isLowerRight;\r\n}\r\n\r\nexport function get_neighbors(grid, node, search_corners = false) {\r\n  var neighbors = [];\r\n  for (let row = node.row - 1; row <= node.row + 1; row++) {\r\n    for (let col = node.col - 1; col <= node.col + 1; col++) {\r\n      const isOriginNode = row === node.row && col === node.col;\r\n      const coordDiff = [row - node.row, col - node.col];\r\n      if (row >= 0 && row < grid.length && col >= 0 && col < grid[row].length && !isOriginNode) {\r\n        const neighbor = grid[row][col];\r\n        if (search_corners || (!search_corners && !is_corner(coordDiff))) {\r\n          if (!neighbor.visited && neighbor.type !== CellType.BARRIER) {\r\n            neighbors.push(neighbor);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\n\r\nexport function mark_neighbors_visited(neighbors, grid) {\r\n  neighbors.forEach((neighbor) => {\r\n    grid[neighbor.row][neighbor.col] = grid[neighbor.row][neighbor.col].asType(CellType.VISITED);\r\n  });\r\n  return grid;\r\n}\r\n\r\nexport function euclidean_distance(x1, y1, x2, y2) {\r\n  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\r\n}\r\n\r\nexport function random_integer(up_to) {\r\n  return Math.floor(Math.random() * up_to);\r\n}\r\n\r\nexport function random_integer_in_range(min, max) {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nexport function random_coords(rows, cols) {\r\n  return [random_integer(rows), random_integer(cols)];\r\n}\r\n","import PriorityQueue from \"../datastructures/PriorityQueue\";\r\nimport { get_neighbors, mark_neighbors_visited, euclidean_distance } from \"./util\";\r\nimport { CellType } from \"../datastructures/CellData\";\r\n\r\nfunction reconstruct_path(cameFrom, current, start) {\r\n  const total_path = [];\r\n  while (cameFrom[current.id] !== undefined && current.id !== start.id) {\r\n    current = cameFrom[current.id];\r\n    current.type = CellType.ADDED_TO_ROUTE;\r\n    total_path.unshift(current);\r\n  }\r\n  return total_path.slice(1); // Don't include the start node\r\n}\r\n\r\nexport default function a_star(grid, start, goal, search_corners = true) {\r\n  var visitedNodes = [];\r\n  var openSet = new PriorityQueue();\r\n  openSet.enqueue(start, 0);\r\n\r\n  var cameFrom = new Map();\r\n\r\n  var gscore = new Map();\r\n  gscore[start.id] = 0;\r\n\r\n  var fscore = new Map();\r\n  fscore[start.id] = euclidean_distance(start.col, start.row, goal.col, goal.row);\r\n\r\n  while (!openSet.isEmpty()) {\r\n    var current = openSet.dequeue();\r\n    if (current !== start && current !== goal) {\r\n      // Don't include start or goal in visited\r\n      visitedNodes.push(current.asType(CellType.VISITED));\r\n    }\r\n    if (current.id === goal.id) {\r\n      return [visitedNodes, reconstruct_path(cameFrom, current, start)]; // Returns all nodes visited (in order) as well as the path from start to goal (in order) for animation purposes\r\n    }\r\n    const neighbors = get_neighbors(grid, current, search_corners);\r\n    grid = mark_neighbors_visited(neighbors, grid);\r\n    for (var i = 0; i < neighbors.length; i++) {\r\n      var neighbor = neighbors[i];\r\n      var tentative_gscore = gscore[current.id] + euclidean_distance(current.col, current.row, neighbor.col, neighbor.row);\r\n      const neighbor_gscore = gscore.has(neighbor.id) ? gscore[neighbor.id] : Infinity;\r\n      if (tentative_gscore < neighbor_gscore) {\r\n        cameFrom[neighbor.id] = current;\r\n        gscore[neighbor.id] = tentative_gscore;\r\n        fscore[neighbor.id] = gscore[neighbor.id] + euclidean_distance(neighbor.col, neighbor.row, goal.col, goal.row) + neighbor.weight;\r\n        if (!openSet.contains(neighbor)) {\r\n          openSet.enqueue(neighbor, fscore[neighbor.id]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return null; // Failure\r\n}\r\n","import PriorityQueue from \"../datastructures/PriorityQueue\";\r\nimport { CellType } from \"../datastructures/CellData\";\r\nimport { get_neighbors, mark_neighbors_visited } from \"./util\";\r\n\r\nfunction reconstructPath(prev, current) {\r\n  const total_path = [];\r\n  while (prev[current.id] !== undefined) {\r\n    current = prev[current.id];\r\n    total_path.unshift(current.asType(CellType.ADDED_TO_ROUTE));\r\n  }\r\n  return total_path.slice(1);\r\n}\r\n\r\nexport default function dijikstra(grid, start, goal) {\r\n  var dist = new Map();\r\n  dist[start.id] = 0;\r\n\r\n  var prev = new Map();\r\n  var visitedNodes = [];\r\n\r\n  var vertices = new PriorityQueue();\r\n  vertices.enqueue(start, dist[start.id]);\r\n\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[row].length; col++) {\r\n      const node = grid[row][col];\r\n      if (node.id !== start.id) {\r\n        dist[node.id] = Infinity;\r\n        prev[node.id] = undefined;\r\n      }\r\n    }\r\n  }\r\n  while (!vertices.isEmpty()) {\r\n    var current = vertices.dequeue();\r\n    if (current !== start && current !== goal) {\r\n      visitedNodes.push(current.asType(CellType.VISITED));\r\n    }\r\n    if (current.id === goal.id) {\r\n      return [visitedNodes, reconstructPath(prev, current)];\r\n    }\r\n    const neighbors = get_neighbors(grid, current, false);\r\n    grid = mark_neighbors_visited(neighbors, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      const neighbor = neighbors[i];\r\n      const alt = dist[current.id] + neighbor.weight;\r\n      if (alt < dist[neighbor.id]) {\r\n        dist[neighbor.id] = alt;\r\n        prev[neighbor.id] = current;\r\n        if (!vertices.contains(neighbor)) {\r\n          vertices.enqueue(neighbor, dist[neighbor.id]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Failed to find goal\r\n  return null;\r\n}\r\n","export default function Queue() {\r\n  this.elements = [];\r\n}\r\n\r\nQueue.prototype.enqueue = function (e) {\r\n  this.elements.push(e);\r\n};\r\n\r\nQueue.prototype.dequeue = function () {\r\n  return this.elements.shift();\r\n};\r\n\r\nQueue.prototype.isEmpty = function () {\r\n  return this.elements.length === 0;\r\n};\r\n\r\nQueue.prototype.peek = function () {\r\n  return !this.isEmpty() ? this.elements[0] : undefined;\r\n};\r\n\r\nQueue.prototype.length = function () {\r\n  return this.elements.length;\r\n};\r\n","import Queue from \"../datastructures/Queue\";\r\nimport { CellType } from \"../datastructures/CellData\";\r\nimport { get_neighbors, mark_neighbors_visited } from \"./util\";\r\n\r\nfunction reconstructPath(cameFrom, current, start) {\r\n  const total_path = [];\r\n  while (cameFrom[current.id] !== undefined) {\r\n    current = cameFrom[current.id];\r\n    if (current.id === start.id) {\r\n      break;\r\n    }\r\n    total_path.unshift(current.asType(CellType.ADDED_TO_ROUTE));\r\n  }\r\n  return total_path;\r\n}\r\n\r\nexport default function bfs(grid, start, goal) {\r\n  let q = new Queue();\r\n  let visitedNodes = [];\r\n  let cameFrom = new Map();\r\n  q.enqueue(start);\r\n  while (!q.isEmpty()) {\r\n    let current = q.dequeue();\r\n    if (current !== start && current !== goal) {\r\n      visitedNodes.push(current.asType(CellType.VISITED));\r\n    }\r\n    if (current.id === goal.id) {\r\n      return [visitedNodes, reconstructPath(cameFrom, current, start)];\r\n    }\r\n    const neighbors = get_neighbors(grid, current, false);\r\n    grid = mark_neighbors_visited(neighbors, grid);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n      const neighbor = neighbors[i];\r\n      cameFrom[neighbor.id] = current;\r\n      q.enqueue(neighbor);\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import { CellType } from \"../datastructures/CellData\";\r\n\r\nfunction direct_edges(grid, node) {\r\n  let edges = [];\r\n  if (node.row > 0 && !grid[node.row - 1][node.col].visited && grid[node.row - 1][node.col].type !== CellType.BARRIER) {\r\n    edges.unshift(grid[node.row - 1][node.col]); // N\r\n  }\r\n  if (node.row < grid.length - 1 && !grid[node.row + 1][node.col].visited && grid[node.row + 1][node.col].type !== CellType.BARRIER) {\r\n    edges.unshift(grid[node.row + 1][node.col]); // S\r\n  }\r\n  if (node.col > 0 && !grid[node.row][node.col - 1].visited && grid[node.row][node.col - 1].type !== CellType.BARRIER) {\r\n    edges.unshift(grid[node.row][node.col - 1]); // W\r\n  }\r\n  if (node.col < grid[0].length - 1 && !grid[node.row][node.col + 1].visited && grid[node.row][node.col + 1].type !== CellType.BARRIER) {\r\n    edges.unshift(grid[node.row][node.col + 1]); // E\r\n  }\r\n  return edges;\r\n}\r\n\r\nexport default function dfs(grid, start, goal) {\r\n  let s = [start];\r\n  let visitedNodes = [];\r\n  let explored = new Map();\r\n  let cameFrom = new Map();\r\n  explored[start.id] = true;\r\n  while (s.length) {\r\n    let current = s.pop();\r\n    if (current.id !== start.id && current.id !== goal.id) {\r\n      visitedNodes.push(current.asType(CellType.VISITED));\r\n    }\r\n    if (current.id === goal.id) {\r\n      return [visitedNodes, visitedNodes];\r\n    }\r\n    explored[current.id] = true;\r\n    current.visited = true;\r\n    direct_edges(grid, current).forEach((neighbor) => {\r\n      if (!explored[neighbor.id]) {\r\n        cameFrom[neighbor.id] = current;\r\n        s.push(neighbor);\r\n      }\r\n    });\r\n  }\r\n  return null;\r\n}\r\n","export default class MazeCell {\r\n  constructor(row, col, isWall = true, isPassage = false) {\r\n    this.row = row;\r\n    this.col = col;\r\n    this.id = `mazecell_${row}_${col}`;\r\n    this.isWall = isWall;\r\n    this.isPassage = isPassage;\r\n    this.visited = false;\r\n  }\r\n\r\n  opposing_cell_coords(originCell, maze) {\r\n    const rowDiff = this.row - originCell.row;\r\n    const colDiff = this.col - originCell.col;\r\n    var coords = undefined;\r\n    if (rowDiff === 1) {\r\n      coords = [this.row + 1, this.col];\r\n    } else if (rowDiff === -1) {\r\n      coords = [this.row - 1, this.col];\r\n    } else if (colDiff === 1) {\r\n      coords = [this.row, this.col + 1];\r\n    } else if (colDiff === -1) {\r\n      coords = [this.row, this.col - 1];\r\n    }\r\n    if (coords) {\r\n      const in_bounds = coords[0] >= 0 && coords[0] < maze.length && coords[1] >= 0 && coords[1] < maze[0].length;\r\n      return in_bounds ? coords : undefined;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  surrounding_walls(maze) {\r\n    var walls = [];\r\n    if (this.row > 0 && maze[this.row - 1][this.col].isWall) {\r\n      walls.push(maze[this.row - 1][this.col]); // N\r\n    }\r\n    if (this.row < maze.length - 1 && maze[this.row + 1][this.col].isWall) {\r\n      walls.push(maze[this.row + 1][this.col]); // S\r\n    }\r\n    if (this.col > 0 && maze[this.row][this.col - 1].isWall) {\r\n      walls.push(maze[this.row][this.col - 1]); // W\r\n    }\r\n    if (this.col < maze[0].length - 1 && maze[this.row][this.col + 1].isWall) {\r\n      walls.push(maze[this.row][this.col + 1]); // E\r\n    }\r\n    return walls;\r\n  }\r\n\r\n  mark_part_of_maze() {\r\n    this.isPassage = true;\r\n    this.isWall = false;\r\n  }\r\n\r\n  mark_wall() {\r\n    this.isWall = true;\r\n    this.isPassage = false;\r\n  }\r\n}\r\n","import MazeCell from \"../datastructures/MazeCell\";\r\nimport { random_integer, random_integer_in_range } from \"./util\";\r\nimport { CellData, CellType } from \"../datastructures/CellData\";\r\n\r\nconst Orientation = {\r\n  HORIZONTAL: 0,\r\n  VERTICAL: 1,\r\n};\r\n\r\nfunction convert_maze_to_grid(maze, startCell, goalCell) {\r\n  var gridWallsToAnimate = [];\r\n  for (let row = 0; row < maze.length; row++) {\r\n    for (let col = 0; col < maze[row].length; col++) {\r\n      const isStart = row === startCell.row && col === startCell.col;\r\n      const isGoal = row === goalCell.row && col === goalCell.col;\r\n      if (maze[row][col].isWall && !isStart && !isGoal) {\r\n        gridWallsToAnimate.push(new CellData(row, col, CellType.BARRIER));\r\n      }\r\n    }\r\n  }\r\n  return gridWallsToAnimate;\r\n}\r\n\r\nfunction get_initial_maze(rows, cols) {\r\n  var maze = [];\r\n  for (let row = 0; row < rows; row++) {\r\n    var curRow = [];\r\n    for (let col = 0; col < cols; col++) {\r\n      curRow.push(new MazeCell(row, col, false, true));\r\n    }\r\n    maze.push(curRow);\r\n  }\r\n  return maze;\r\n}\r\n\r\nfunction divide(maze, width, height, startRow, endRow, startCol, endCol, orientation) {\r\n  if (width < 2 || height < 2) return;\r\n\r\n  const horizontal = orientation === Orientation.HORIZONTAL;\r\n\r\n  // Cut our section in half\r\n  const cutRow = Math.floor(endRow / 2.0) + startRow;\r\n  const cutCol = Math.floor(endCol / 2.0) + startCol;\r\n\r\n  // Where will the opening be?\r\n  const holeRow = horizontal ? cutRow : random_integer_in_range(startRow, endRow);\r\n  const holeCol = horizontal ? random_integer_in_range(startCol, endCol) : cutCol;\r\n  // How long is our segment to draw?\r\n  const length = horizontal ? endCol - startCol : endRow - startRow;\r\n\r\n  for (let i = 0; i < length; i++) {\r\n    const row = horizontal ? cutRow : startRow + i;\r\n    const col = horizontal ? startCol + i : cutCol;\r\n    if ((horizontal && col !== holeCol) || (!horizontal && row !== holeRow)) {\r\n      maze[row][col].mark_wall();\r\n    }\r\n  }\r\n\r\n  var w = horizontal ? width : Math.floor(width / 2.0);\r\n  var h = horizontal ? Math.floor(height / 2.0) : height;\r\n  var sr = startRow;\r\n  var er = horizontal ? cutRow : endRow;\r\n  var sc = startCol;\r\n  var ec = horizontal ? endCol : cutCol;\r\n\r\n  divide(maze, w, h, sr, er, sc, ec, get_orientation(w, h));\r\n\r\n  sr = horizontal ? cutRow : startRow;\r\n  er = endRow;\r\n  sc = horizontal ? startCol : cutCol;\r\n  ec = endCol;\r\n\r\n  divide(maze, w, h, sr, er, sc, ec, get_orientation(w, h));\r\n}\r\n\r\nexport default function recursive_division_maze(rows, cols, startCell, goalCell) {\r\n  var maze = get_initial_maze(rows, cols);\r\n  divide(maze, cols, rows, 0, rows, 0, cols, get_orientation(cols, rows));\r\n  const converted = convert_maze_to_grid(maze, startCell, goalCell);\r\n  return converted;\r\n}\r\n\r\n// const S = 1;\r\n// const E = 2;\r\n\r\n// function convert_maze_to_grid(maze, startCell, goalCell) {\r\n//   var gridWallsToAnimate = [];\r\n//   for (let row = 0; row < maze.length; row++) {\r\n//     for (let col = 0; col < maze[row].length; col++) {\r\n//       const isStart = row === startCell.row && col === startCell.col;\r\n//       const isGoal = row === goalCell.row && col === goalCell.col;\r\n//       if (!maze[row][col] && !isStart && !isGoal) {\r\n//         gridWallsToAnimate.push(new CellData(row, col, CellType.BARRIER));\r\n//       }\r\n//     }\r\n//   }\r\n//   return gridWallsToAnimate;\r\n// }\r\n\r\n// function get_initial_maze(rows, cols) {\r\n//   var maze = [];\r\n//   for (let row = 0; row < rows; row++) {\r\n//     var curRow = [];\r\n//     for (let col = 0; col < cols; col++) {\r\n//       curRow.push(0);\r\n//     }\r\n//     maze.push(curRow);\r\n//   }\r\n//   return maze;\r\n// }\r\n\r\nfunction get_orientation(width, height) {\r\n  if (width < height) return Orientation.HORIZONTAL;\r\n  else if (height < width) return Orientation.VERTICAL;\r\n  else return random_integer(2) === 0 ? Orientation.HORIZONTAL : Orientation.VERTICAL;\r\n}\r\n\r\n// function divide(maze, x, y, width, height, orientation) {\r\n//   if (width < 2 || height < 2) return;\r\n\r\n//   const horizontal = orientation === Orientation.HORIZONTAL;\r\n\r\n//   // Where will the line be drawn from?\r\n//   var wx = x + (horizontal ? 0 : random_integer(width - 2));\r\n//   var wy = y + (horizontal ? random_integer(height - 2) : 0);\r\n\r\n//   // Where will the passage through the wall exist?\r\n//   var px = wx + (horizontal ? random_integer(width) : 0);\r\n//   var py = wy + (horizontal ? 0 : random_integer(height));\r\n\r\n//   // What direction will the wall be drawn?\r\n//   var dx = horizontal ? 1 : 0;\r\n//   var dy = horizontal ? 0 : 1;\r\n\r\n//   // How long will the wall be?\r\n//   var length = horizontal ? width : height;\r\n\r\n//   // What direction is perpendicular to the wall?\r\n//   var dir = horizontal ? S : E;\r\n\r\n//   for (let i = 0; i < length; i++) {\r\n//     if (wx !== px || wy !== py) {\r\n//       maze[wy][wx] |= dir;\r\n//     }\r\n//     wx += dx;\r\n//     wy += dy;\r\n//   }\r\n//   var nx = x;\r\n//   var ny = y;\r\n//   var w = horizontal ? width : wx - x + 1;\r\n//   var h = horizontal ? wy - y + 1 : height;\r\n//   divide(maze, nx, ny, w, h, get_orientation(w, h));\r\n\r\n//   nx = horizontal ? x : wx + 1;\r\n//   ny = horizontal ? wy + 1 : y;\r\n//   w = horizontal ? width : x + width - wx - 1;\r\n//   h = horizontal ? y + height - wy - 1 : height;\r\n//   divide(maze, nx, ny, w, h, get_orientation(w, h));\r\n// }\r\n\r\n// export default function recursive_division_maze(rows, cols, startCell, goalCell) {\r\n//   var maze = get_initial_maze(rows, cols);\r\n//   divide(maze, 0, 0, cols, rows, get_orientation(cols, rows));\r\n//   const converted = convert_maze_to_grid(maze, startCell, goalCell);\r\n//   return converted;\r\n// }\r\n","import React, { useState } from \"react\";\r\nimport \"./Pathfinder.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport Grid from \"./Grid\";\r\nimport TopBar from \"./TopBar\";\r\nimport { CellType, CellData } from \"../datastructures/CellData\";\r\nimport { Algorithm } from \"./enums\";\r\nimport a_star from \"../algorithms/astar\";\r\nimport dijikstra from \"../algorithms/dijikstra\";\r\nimport bfs from \"../algorithms/bfs\";\r\nimport dfs from \"../algorithms/dfs\";\r\nimport recursive_division_maze from \"../algorithms/recursive_division_maze\";\r\n\r\nlet Pathfinder = (props) => {\r\n  const DEFAULT_START_ROW = Math.round(props.gridRows / 2.0);\r\n  const DEFAULT_START_COL = Math.round(props.gridColumns * 0.1);\r\n  const DEFAULT_GOAL_ROW = Math.round(props.gridRows / 2.0);\r\n  const DEFAULT_GOAL_COL = Math.round(props.gridColumns - props.gridColumns * 0.1);\r\n\r\n  const getInitialGrid = (rows, cols) => {\r\n    const grid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n      const curRow = [];\r\n      for (let col = 0; col < cols; col++) {\r\n        if (row === DEFAULT_START_ROW && col === DEFAULT_START_COL) {\r\n          curRow.push(new CellData(row, col, CellType.START));\r\n        } else if (row === DEFAULT_GOAL_ROW && col === DEFAULT_GOAL_COL) {\r\n          curRow.push(new CellData(row, col, CellType.GOAL));\r\n        } else {\r\n          curRow.push(new CellData(row, col, CellType.STANDARD));\r\n        }\r\n      }\r\n      grid.push(curRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  const [grid, setGrid] = useState(getInitialGrid(props.gridRows, props.gridColumns));\r\n  const [startCell, setStartCell] = useState(grid[DEFAULT_START_ROW][DEFAULT_START_COL]);\r\n  const [goalCell, setGoalCell] = useState(grid[DEFAULT_GOAL_ROW][DEFAULT_GOAL_COL]);\r\n  const [selectedAlgo, setSelectedAlgo] = useState(Algorithm.ASTAR_8);\r\n  const [mouseIsDown, setMouseIsDown] = useState(false);\r\n  const [draggingCell, setDraggingCell] = useState(false);\r\n  const [draggedCellType, setDraggedCellType] = useState(undefined);\r\n  const [draggedFrom, setDraggedFrom] = useState(undefined);\r\n  const [draggedTo, setDraggedTo] = useState(undefined);\r\n\r\n  const clearGrid = () => {\r\n    var newGrid = grid.slice();\r\n    newGrid.forEach((row) => {\r\n      row.forEach((cell) => {\r\n        if (cell.row === DEFAULT_START_ROW && cell.col === DEFAULT_START_COL) {\r\n          newGrid[cell.row][cell.col] = cell.asType(CellType.START);\r\n          document.getElementById(cell.id).className = \"grid-cell start-cell\";\r\n        } else if (cell.row === DEFAULT_GOAL_ROW && cell.col === DEFAULT_GOAL_COL) {\r\n          newGrid[cell.row][cell.col] = cell.asType(CellType.GOAL);\r\n          document.getElementById(cell.id).className = \"grid-cell goal-cell\";\r\n        } else {\r\n          newGrid[cell.row][cell.col] = cell.asType(CellType.STANDARD);\r\n          document.getElementById(cell.id).className = \"grid-cell\";\r\n        }\r\n      });\r\n    });\r\n    setGrid(newGrid);\r\n    setStartCell(newGrid[DEFAULT_START_ROW][DEFAULT_START_COL]);\r\n    setGoalCell(newGrid[DEFAULT_GOAL_ROW][DEFAULT_GOAL_COL]);\r\n  };\r\n\r\n  const genMaze = () => {\r\n    const wallsToAnimate = recursive_division_maze(props.gridRows, props.gridColumns, startCell, goalCell);\r\n    var newGrid = [];\r\n    wallsToAnimate.forEach((mazeWall, i) => {\r\n      newGrid = placeWallAndGetGrid(mazeWall.row, mazeWall.col);\r\n      setTimeout(() => {\r\n        document.getElementById(mazeWall.id).className = `grid-cell wall-cell`;\r\n      }, 10 * i);\r\n      if (i + 1 === wallsToAnimate.length) {\r\n        setTimeout(() => {\r\n          setGrid(newGrid);\r\n          return;\r\n        }, 10 * i);\r\n      }\r\n    });\r\n  };\r\n\r\n  const placeWallAndGetGrid = (row, col) => {\r\n    const newGrid = grid.slice();\r\n    newGrid[row][col] = newGrid[row][col].asType(CellType.BARRIER);\r\n    return newGrid;\r\n  };\r\n\r\n  const dragCellAndGetGrid = (fromRow, fromCol, toRow, toCol) => {\r\n    let newGrid = grid.slice();\r\n    newGrid[fromRow][fromCol] = newGrid[fromRow][fromCol].asType(CellType.STANDARD);\r\n    newGrid[toRow][toCol] = newGrid[toRow][toCol].asType(draggedCellType);\r\n    return newGrid;\r\n  };\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    setMouseIsDown(true);\r\n    if (grid[row][col].type === CellType.START || grid[row][col].type === CellType.GOAL) {\r\n      setDraggingCell(true);\r\n      setDraggedCellType(grid[row][col].type);\r\n      setDraggedFrom([row, col]);\r\n    } else {\r\n      const newGrid = placeWallAndGetGrid(row, col);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (!mouseIsDown) return;\r\n    if (grid[row][col].type === CellType.START || grid[row][col].type === CellType.GOAL) return;\r\n    if (draggingCell) {\r\n      setDraggedTo([row, col]);\r\n      const newGrid = dragCellAndGetGrid(\r\n        draggedFrom[0],\r\n        draggedFrom[1],\r\n        row /* Can't use draggedTo here yet, because the state setting calls are batched together */,\r\n        col /* Can't use draggedTo here yet, because the state setting calls are batched together */\r\n      );\r\n      setGrid(newGrid);\r\n      setDraggedFrom([row, col]);\r\n    } else {\r\n      const newGrid = placeWallAndGetGrid(row, col);\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    setMouseIsDown(false);\r\n    if (draggingCell) {\r\n      setDraggingCell(false);\r\n      if (draggedCellType === CellType.START) {\r\n        setStartCell(grid[draggedTo[0]][draggedTo[1]]);\r\n      } else {\r\n        setGoalCell(grid[draggedTo[0]][draggedTo[1]]);\r\n      }\r\n      setDraggedCellType(undefined);\r\n      setDraggedFrom(undefined);\r\n      setDraggedTo(undefined);\r\n    }\r\n  };\r\n\r\n  const runAnimatedAlgo = () => {\r\n    var result = undefined;\r\n    switch (selectedAlgo) {\r\n      case Algorithm.ASTAR_8:\r\n        result = a_star(grid, startCell, goalCell, true);\r\n        break;\r\n      case Algorithm.ASTAR_4:\r\n        result = a_star(grid, startCell, goalCell, false);\r\n        break;\r\n      case Algorithm.DFS:\r\n        result = dfs(grid, startCell, goalCell);\r\n        break;\r\n      case Algorithm.BFS:\r\n        result = bfs(grid, startCell, goalCell);\r\n        break;\r\n      case Algorithm.DIJIKSTRA:\r\n        result = dijikstra(grid, startCell, goalCell);\r\n        break;\r\n      // case Algorithm.SWARM:\r\n      //   result = a_star(grid, startCell, goalCell, true);\r\n      //   break;\r\n      // case Algorithm.CONVERGENT_SWARM:\r\n      //   result = a_star(grid, startCell, goalCell, true);\r\n      //   break;\r\n      // case Algorithm.BIDIRECTIONAL_SWARM:\r\n      //   result = a_star(grid, startCell, goalCell, true);\r\n      //   break;\r\n      // case Algorithm.GREEDY_BEST_FS:\r\n      //   result = a_star(grid, startCell, goalCell, true);\r\n      //   break;\r\n      default:\r\n        result = a_star(grid, startCell, goalCell, true);\r\n        break;\r\n    }\r\n    const visitedNodes = result[0];\r\n    const reconstructedRoute = result[1];\r\n    animateAlgo(visitedNodes, reconstructedRoute);\r\n  };\r\n\r\n  const animateAlgo = (visitedNodes, reconstructedRoute) => {\r\n    visitedNodes.forEach((visitedNode, i) => {\r\n      setTimeout(() => {\r\n        document.getElementById(visitedNode.id).className = `grid-cell visited`;\r\n      }, 10 * i);\r\n      if (i + 1 === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          animateRouteReconstruction(reconstructedRoute);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n    });\r\n  };\r\n\r\n  const animateRouteReconstruction = (reconstructedRoute) => {\r\n    reconstructedRoute.forEach((routeNode, i) => {\r\n      setTimeout(() => {\r\n        document.getElementById(routeNode.id).className = \"grid-cell route\";\r\n      }, 50 * i);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TopBar clearGrid={clearGrid} setAlgo={setSelectedAlgo} selectedAlgoName={selectedAlgo} runAnimatedAlgo={runAnimatedAlgo} genMaze={genMaze} />\r\n      <div className=\"grid-parent\" onMouseUp={() => handleMouseUp()}>\r\n        <Grid cells={grid} onMouseDown={handleMouseDown} onMouseEnter={handleMouseEnter} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nPathfinder.propTypes = {\r\n  gridRows: PropTypes.number,\r\n  gridColumns: PropTypes.number,\r\n};\r\n\r\nPathfinder.defaultProps = {\r\n  gridRows: 20,\r\n  gridColumns: 50,\r\n};\r\n\r\nPathfinder = React.memo(Pathfinder);\r\n\r\nexport default Pathfinder;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Pathfinder from \"./components/Pathfinder\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Pathfinder gridRows={30} gridColumns={50} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}